{"version":3,"file":"bundle.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;ACAO;AACP,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D;AAC9D,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC,WAAW;AAC9C,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,mCAAmC,WAAW;AAC9C,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;UC1FA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;ACN0B;AACY;AACtC,qBAAqB,+CAAQ;AAC7B","sources":["webpack://virtual-keyboard/./src/css/style.css?6b7b","webpack://virtual-keyboard/./src/js/keyboard.js","webpack://virtual-keyboard/webpack/bootstrap","webpack://virtual-keyboard/webpack/runtime/define property getters","webpack://virtual-keyboard/webpack/runtime/hasOwnProperty shorthand","webpack://virtual-keyboard/webpack/runtime/make namespace object","webpack://virtual-keyboard/./src/js/index.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","export class Keyboard {\n  #switchEl; //private field 사용 Keyboard 클래스를 생성하면 switchEl이 발생한다\n  #fontSelectEl;\n  #containerEl;\n  #keyboardEl;\n  #inputGroupEl;\n  #inputEl;\n  #keyPress = false; //마우스와 키보드가 눌려있는 상태인지 확인. 이것은 마우스와 키보드의 동시입력을 막으려고 지정\n  #mouseDown = false;\n  constructor() {\n    this.#assignElement();\n    this.#addEvent();\n  }\n\n  #assignElement() {\n    this.#containerEl = document.getElementById(\"container\");\n    this.#switchEl = this.#containerEl.querySelector(\"#switch\");\n    this.#fontSelectEl = this.#containerEl.querySelector(\"#font\");\n    this.#keyboardEl = this.#containerEl.querySelector(\"#keyboard\");\n    this.#inputGroupEl = this.#containerEl.querySelector(\"#input-group\");\n    this.#inputEl = this.#inputGroupEl.querySelector(\"#input\");\n  }\n  #addEvent() {\n    this.#switchEl.addEventListener(\"change\", this.#onChangeTheme);\n    this.#fontSelectEl.addEventListener(\"change\", this.#onChangeFont);\n    document.addEventListener(\"keydown\", this.#onKeyDown.bind(this)); //이 두개를 bind 하는 이유는 함수에서 this를 쓰고 있는데 전역객체의 this는 윈도우다. 윈도우에 #inputEl같은 요소가 없기 때문에 bind해주는 것\n    document.addEventListener(\"keyup\", this.#onKeyUp.bind(this));\n    this.#inputEl.addEventListener(\"input\", this.#onInput);\n    this.#keyboardEl.addEventListener(\n      \"mousedown\",\n      this.#onMouseDown.bind(this)\n    );\n    document.addEventListener(\"mouseup\", this.#onMouseUp.bind(this)); //mouseup을 keyboardEl에서 하지 않은 이유는 꼭 해당 키보드요소 위에서 마우스를 뗀다는 보장이 없다.\n  }\n  #onMouseUp(event) {\n    if (this.#keyPress) return;\n    this.#mouseDown = false;\n    const keyEl = event.target.closest(\"div.key\");\n    // const keyEl = event.target;\n    const isActive = !!keyEl?.classList.contains(\"active\");\n    const val = keyEl?.dataset.val; //data-val:'1' 인 경우 dataset.val으로 불러올 수 있다\n    if (isActive && !!val && val !== \"Space\" && val !== \"Backspace\") {\n      this.#inputEl.value += val;\n    }\n    if (isActive && val === \"Space\") {\n      this.#inputEl.value += \" \";\n    }\n    if (isActive && val === \"Backspace\") {\n      this.#inputEl.value = this.#inputEl.value.slice(0, -1);\n    }\n    this.#keyboardEl.querySelector(\".active\")?.classList.remove(\"active\");\n  }\n  #onMouseDown(event) {\n    if (this.#keyPress) return;\n    this.#mouseDown = true;\n    event.target.closest(\"div.key\")?.classList.add(\"active\"); //closest는 div.key라는 css 선택자를 찾을때까지 root방향으로 탐색\n    // event.target?.classList.add(\"active\"); //closest는 div.key라는 css 선택자를 찾을때까지 root방향으로 탐색\n  }\n  #onInput(event) {\n    console.log(event.target.value);\n    event.target.value = event.target.value.replace(/[ㄱ-ㅎ/ㅏ-ㅣ/가-힣]/, \"\");\n  }\n  #onKeyDown(event) {\n    if (this.#mouseDown) return;\n    this.#keyPress = true;\n    this.#inputGroupEl.classList.toggle(\n      \"error\",\n      /[ㄱ-ㅎ/ㅏ-ㅣ/가-힣]/.test(event.key)\n    );\n\n    this.#keyboardEl\n      .querySelector(`[data-code=${event.code}]`) //이 attribute를 가진 dom을 찾아라\n      ?.classList.add(\"active\"); //key를 눌렀을 때 css의 active 속성 추가\n  }\n  #onKeyUp(event) {\n    if (this.#mouseDown) return;\n    this.#keyPress = false;\n    this.#keyboardEl\n      .querySelector(`[data-code=${event.code}]`) //이 attribute를 가진 dom을 찾아라\n      ?.classList.remove(\"active\"); //key를 눌렀을 때 css의 active 속성 추가\n  }\n  #onChangeTheme(event) {\n    document.documentElement.setAttribute(\n      \"theme\",\n      event.target.checked ? \"dark-mode\" : \"\"\n    );\n  }\n  #onChangeFont(event) {\n    document.body.style.fontFamily = event.target.value;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import \"../css/style.css\";\nimport { Keyboard } from \"./keyboard\";\nconst keyboard = new Keyboard();\nkeyboard;\n"],"names":[],"sourceRoot":""}